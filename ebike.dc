
#read in files
#read_file -format sverilog {eBike.sv A2D_intf.sv brushless.sv cadence_filt.sv cadence_LU.sv desiredDrive.sv inert_intf.sv inertial_integrator.sv mtr_drv.sv nonoverlap.sv PID.sv PWM.sv rst_synch.sv sensorCondition.sv SPI_mnrch.sv telemetry.sv tgglMd.sv UART_tx.sv }
read_file -format sverilog {UART_tx.sv SPI_mnrch.sv desiredDrive.sv telemetry.sv cadence_filt.sv cadence_LU.sv PWM.sv rst_synch.sv A2D_intf.sv inertial_integrator.sv inert_intf.sv sensorCondition.sv PID.sv nonoverlap.sv brushless.sv mtr_drv.sv tgglMd.sv eBike.sv }

#-autoread -format sverilog -top eBike 

#set top level for design 
set current_design eBike

link

#create clk @400 Mhz (period in nanoseconds) 
create_clock -name "clk" -period 2.5 -waveform {0 1} {clk}

#disable buffering on clk
set_dont_touch_network [find port clk]

#set input delay for all inputs (prim_inputs will be used to address all inputs)
set prim_inputs [remove_from_collection [all_inputs] [find port clk]]

#set input delay
set_input_delay -clock clk 0.3 $prim_inputs

#set drive strength
set_driving_cell -lib_cell NAND2X2_LVT -library saed32lvt_tt0p85v25c $prim_inputs

#set rst_n to stronly driven
set_drive 0.0001 rst_n

#set output delay 
set_output_delay -clock clk 0.5 [all_outputs]

#tell synopsys how much load it has to drive default unit is fF
set_load 50 [all_outputs] 

#set transition time
set_max_transition 0.20 [current_design] 

#make guess at parasitic capacitence 
set_wire_load_model -name 16000 -library saed32lvt_tt0p85v25c

#compile the design
compile -map_effort high 

set_clock_uncertainty 0.15 clk 
set_fix_hold clk 

ungroup -all -flatten

compile -map_effort medium

#write out resulting synthesized netlist 
write -format verilog ebike -output ebike.vg

# Generate a min delay (setup) report
report_timing -delay_type min 

# Generate a max delay (hold) report
report_timing -delay_type max 

# Generate an area report
report_area > area_report.txt


write_sdc ebike.sdc
